variables:
  DOCKER_TLS_CERTDIR: "/certs"

stages:
  - lint
  - build
  - build image
  - deploy

lint:
  image: node:10.23-alpine
  stage: lint
  needs: []
  cache:
    paths:
      - node_modules
  script:
    - npm install --progress=false
    - VUE_APP_ENV=dev VUE_APP_NAME=PV-Tool npm run lint

build staging:
  image: node:10.23-alpine
  stage: build
  needs: []
  only:
    refs:
      - master
  cache:
    paths:
      - node_modules
  script:
    - npm install --progress=false
    - VUE_APP_DOMAIN_STAG="stag.api.cct-ev.de" VUE_APP_ENV=staging VUE_APP_NAME=PV-Tool npm run build
  artifacts:
    expire_in: 1 week
    paths:
      - dist

build production:
  image: node:10.23-alpine
  stage: build
  needs: []
  only:
    refs:
      - production
  cache:
    paths:
      - node_modules
  script:
    - npm install --progress=false
    - VUE_APP_DOMAIN_PROD="api.cct-ev.de" VUE_APP_ENV=production VUE_APP_NAME=PV-Tool npm run build
  artifacts:
    expire_in: 1 week
    paths:
      - dist

build image:
  stage: build image
  image: docker:19.03.8
  only:
    refs:
      - production
      - master
  services:
    - docker:19.03.8-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

deploy staging:
  image: docker/compose:alpine-1.27.4
  stage: deploy
  needs:
    - job: build image
      artifacts: false
  only:
    refs:
      - master
  environment:
    name: stag
    url: https://stag.portal.cct-ev.de
  variables:
    DOCKER_HOST: 'ssh://gitlab-ci@stag.api.cct-ev.de'
  before_script:
    - "which ssh-agent || ( apk update && apk add openssh-client )"
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker-compose -p frontend pull
    - docker-compose -p frontend up -d


deploy production:
  image: docker/compose:alpine-1.27.4
  stage: deploy
  needs:
    - job: build image
      artifacts: false
  only:
    refs:
      - production
  environment:
    name: prod
    url: https://portal.cct-ev.de
  variables:
    DOCKER_HOST: 'ssh://gitlab-ci@portal.cct-ev.de'
  before_script:
    - "which ssh-agent || ( apk update && apk add openssh-client )"
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker-compose -p frontend pull
    - docker-compose -p frontend up -d
